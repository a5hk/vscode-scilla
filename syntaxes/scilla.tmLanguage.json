{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "VS Code Scilla",
  "patterns": [
    {
      "include": "#types"
    },
    {
      "include": "#libraries"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#contract"
    },
    {
      "include": "#support_function_call"
    },
    {
      "include": "#punctuations"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#function_call"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "match": "(\\b|\\s*)(match)\\b",
          "captures": {
            "2": { "name": "keyword.control.scilla" }
          }
        },
        {
          "match": "(\\b|\\s*)(accept|as|builtin|catch|contract|delete|Emp|end|event|exists|field|forall|fun|let|library|in|import|Map|match|of|procedure|scilla_version|send|tfun|throw|transition|try|with)\\b",
          "captures": {
            "2": { "name": "keyword.scilla" }
          }
        },
        {
          "match": "\\s*(=>|=|:=|<\\-\\s*\\&|<\\-|\\|)",
          "captures": {
            "1": { "name": "keyword.operator.scilla" }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "(\\b|\\s*)(Int32|Int64|Int128|Int256|Uint32|Uint64|Uint128|Uint256|String|BNum|Message|Event|ByStr|ByStr20|ByStr32|ByStr64|Bool|List|Pair|Nat|Nil|None|Succ|Zero|Cons|Some)\\b",
          "captures": {
            "2": { "name": "support.type.scilla" }
          }
        },
        {
          "begin": "\\bOption\\s*",
          "end": "(?!\\G)",
          "beginCaptures": {
            "0": { "name": "support.type.scilla" }
          },
          "patterns": [
            {
              "include": "$self"
            },
            {
              "name": "storage.type.scilla",
              "match": "[A-Z][a-zA-Z0-9_]*"
            }
          ]
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": { "name": "punctuation.scilla" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.scilla" }
          },
          "patterns": [
            {
              "include": "$self"
            },
            {
              "name": "storage.type.scilla",
              "match": "[A-Z][a-zA-Z0-9_]*"
            }
          ]
        },
        {
          "begin": "\\b(type)\\b\\s*",
          "end": "([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "keyword.scilla" }
          },
          "endCaptures": {
            "0": { "name": "storage.type.scilla" }
          }
        },
        {
          "begin": "\\b(?<=of)\\s*",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.scilla" }
          },
          "patterns": [
            {
              "include": "$self"
            },
            {
              "name": "storage.type.scilla",
              "match": "[A-Z][a-zA-Z0-9_]*"
            }
          ]
        }
      ]
    },
    "libraries": {
      "patterns": [
        {
          "name": "support.other.namespace.scilla",
          "match": "\\b(BoolUtils|IntUtils|ListUtils|NatUtils|PairUtils)\\b"
        },
        {
          "begin": "\\b(library|import)\\b\\s*",
          "end": "([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "keyword.scilla" }
          },
          "endCaptures": {
            "0": { "name": "entity.name.namespace.scilla" }
          }
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "support.constant.scilla",
          "match": "\\b(False|True|_amount|_sender|_recipient|_tag|_eventname|_this_address|_creation_block|_origin|_balance|BLOCKNUMBER)\\b"
        },
        {
          "include": "#numbers"
        }
      ]
    },
    "comments": {
      "name": "comment.block.parens.scilla",
      "begin": "\\(\\*",
      "end": "\\*\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.comment.scilla" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.comment.scilla" }
      }
    },
    "strings": {
      "name": "string.quoted.double.scilla",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.scilla",
          "match": "\\\\."
        }
      ]
    },
    "punctuations": {
      "patterns": [
        {
          "name": "punctuation.scilla",
          "match": ",|;|\\(|\\)|\\{|\\}|\\[|\\]|:"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "begin": "\\b(transition|procedure)\\b\\s*([a-zA-Z][a-zA-Z0-9_]*)\\s*",
          "end": "(?<=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.scilla" },
            "2": { "name": "entity.name.function.scilla" }
          },
          "patterns": [
            {
              "include": "#parameters_list"
            }
          ]
        },
        {
          "begin": "\\b(let)\\s*([a-z][a-zA-Z0-9_]*)\\s*(=)\\s*(fun)\\s*",
          "end": "(?<=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.scilla" },
            "2": { "name": "entity.name.function.scilla" },
            "3": { "name": "keyword.operator.scilla" },
            "4": { "name": "keyword.scilla" }
          },
          "patterns": [
            {
              "include": "#parameters_list"
            }
          ]
        },
        {
          "begin": "\\b(fun)\\s*",
          "end": "(?<=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.scilla" }
          },
          "patterns": [
            {
              "include": "#parameters_list"
            }
          ]
        }
      ]
    },
    "support_function_call": {
      "patterns": [
        {
          "match": "(\\b|\\s*)(builtin)\\b\\s*([a-z][a-zA-Z0-9_]*)",
          "captures": {
            "2": { "name": "keyword.scilla" },
            "3": { "name": "support.function.scilla" }
          }
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(andb|orb|negb|bool_to_string)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(int32_eq|int64_eq|int128_eq|int256_eq|uint32_eq|uint64_eq|uint128_eq|uint256_eq)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(int32_neq|int64_neq|int128_neq|int256_neq|uint32_neq|uint64_neq|uint128_neq|uint256_neq)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(int32_lt|int64_lt|int128_lt|int256_lt|uint32_lt|uint64_lt|uint128_lt|uint256_lt)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(int32_le|int64_le|int128_le|int256_le|uint32_le|uint64_le|uint128_le|uint256_le)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(int32_gt|int64_gt|int128_gt|int256_gt|uint32_gt|uint64_gt|uint128_gt|uint256_gt)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(int32_ge|int64_ge|int128_ge|int256_ge|uint32_ge|uint64_ge|uint128_ge|uint256_ge)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(list_map|list_filter|list_head|list_tail|list_foldl_while|list_append|list_reverse|list_flatten|list_length|list_eq|list_mem|list_forall|list_exists|list_sort|list_find|list_zip|list_zip_with|list_unzip|list_nth)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(nat_prev|nat_fold_while|is_some_zero|nat_eq|nat_to_int)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(int32_to_nat|int64_to_nat|int128_to_nat|int256_to_nat|uint32_to_nat|uint64_to_nat|uint128_to_nat|uint256_to_nat)\\b"
        },
        {
          "name": "support.function.scilla",
          "match": "(\\b|\\s*)(fs|snd)\\b"
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "match": "(?<==)\\s*([a-zA-Z][a-zA-Z0-9_]*)\\s+(?=[a-zA-Z0-9_]+)",
          "captures": {
            "1": { "name": "meta.function-call.scilla" }
          }
        },
        {
          "match": "(?<=(^|=>))\\s*([a-zA-Z][a-zA-Z0-9_]*)\\s+(?=([a-zA-Z0-9_]+\\s*)+(;|$))",
          "captures": {
            "2": { "name": "meta.function-call.scilla" }
          }
        }
      ]
    },
    "parameters_list": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.parameters.begin.scilla" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.parameters.end.scilla" }
      },
      "patterns": [
        {
          "include": "#parameters"
        }
      ]
    },
    "parameters": {
      "begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(:)\\s*",
      "end": "(?!\\G)",
      "beginCaptures": {
        "1": { "name": "variable.parameter.scilla" },
        "2": { "name": "punctuation.scilla" }
      },
      "patterns": [
        {
          "include": "#types"
        },
        {
          "name": "storage.type.scilla",
          "match": "[A-Z][a-zA-Z0-9_]*"
        },
        {
          "include": "$self"
        }
      ]
    },
    "contract": {
      "begin": "\\b(contract)\\b\\s*([A-Z][a-zA-Z0-9_]*)\\b\\s*",
      "end": "(?<=\\))",
      "beginCaptures": {
        "1": { "name": "keyword.scilla" },
        "2": { "name": "entity.name.class" }
      },
      "patterns": [
        {
          "include": "#parameters_list"
        }
      ]
    },
    "numbers": {
      "match": "\\s*(\\-?)\\b([0-9]+)\\b",
      "captures": {
        "1": { "name": "keyword.operator.arithmetic.scilla" },
        "2": { "name": "constant.numeric.scilla" }
      }
    }
  },
  "scopeName": "source.scilla"
}
